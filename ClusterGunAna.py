import ROOT
from ROOT import RDataFrame
from ROOT import TChain, TSelector, TTree, TH1F, TCanvas
from ROOT import TLorentzVector
from ROOT import TVector3
from array import array
import numpy as np
import pickle
import math

import psutil
import time
import sys
import csv

from utils import *
 
# Enable multi-threading
ROOT.ROOT.EnableImplicitMT()

# Batch mode
ROOT.gROOT.SetBatch(ROOT.kTRUE)
ROOT.gStyle.SetFrameLineColor(16)
ROOT.gStyle.SetAxisColor(16)

if __name__ == "__main__":
  
   if len(sys.argv) < 2:
        print("Usage: python script.py <particle_gun> <gun_momentum>")
        sys.exit(1)
      
   particle_gun = sys.argv[1]
   gun_momentum = sys.argv[2]
   subdir = "Gun_"+particle_gun+"_"+ gun_momentum +"GeV"
   gun_label = ROOT.TLatex()
   
   
   if particle_gun == "k":
     gun_label = "K_{0} gun - " + str(gun_momentum) +"GeV"
     part_ID = 311
   elif particle_gun == "pi":
     gun_label = "#pi gun - " + str(gun_momentum) +"GeV"
     part_ID = 211
     
   else:
     print("Unknown particle !!")
    
   #start = time.time()

   #input files 
   #file1 = f"lctuple/lctuple_{particle_gun}Gun_{gun_momentum}GeV_10keve.root"
   file1 = f"lctuple/lctuple_MPGD_semi_{particle_gun}Gun_{gun_momentum}GeV_10keve.root"
   file2 = f"lctuple/lctuple_MPGD_semi_{particle_gun}Gun_{gun_momentum}GeV_10keve.root"
   #file1 = "./lctuple/lctuple_piGun_50GeV_10keve.root"
   #file2 = "./old/lctuple_MPGD.root"
   #we assume the two trees have same entries, adding as "friend"
   ch1 = TChain("MyLCTuple")
   ch1.Add(file1)
   ch2 = TChain("MyLCTuple")
   ch2.Add(file2)
   ch2.BuildIndex("evevt")
   ch1.AddFriend(ch2, "mod") #2nd TTree branches renamed mod.branch

   #from TTree to RDataFrame
   df = RDataFrame(ch1)
   df1 = RDataFrame(ch2)

   #entries after selection
   entries = df.Count()
   entries1 = df1.Count()
   if gun_momentum == 50 :
     n_bins = 100
   else:
     n_bins = 500
     
   #Energy of all clusters
   hEnergyCluSim_baseline = TH1F("hEnergyClu_baseline","Energy of Clusters associated to MC",50,-1,1)
   hEnergyCluSim_mpgd = TH1F("hEnergyClu_mpgd","Energy of Clusters associated to MC",50,-1,1)
   
   hEnergyRes_CluSim_baseline = TH1F("hEnergyRes_CluSim_baseline","hEnergyRes_CluSim",50,-1,1)
   hEnergyRes_CluSim_mpgd = TH1F("hEnergyRes_CluSim_mpgd","hEnergyRes_CluSim",50,-1,1)
   hEnergyRes_CluSim_mpgd_correct = TH1F("hEnergyRes_CluSim_mpgd_correct","hEnergyRes_CluSim correct",50,-1,1)
   
   hEnergyRes_CluRc_baseline = TH1F("hEnergyRes_CluRc_baseline","hEnergyRes_CluRc",50,-1,1)
   hEnergyRes_CluRc_mpgd = TH1F("hEnergyRes_CluRc_mpgd","hEnergyRes_CluRc",50,-1,1)
   
   hEnergyCluRc_baseline = TH1F("hEnergyCluRc_baseline","hEnergyClu baseline; Energy [GeV]; Entries",n_bins,0,100)
   hEnergyCluRc_mpgd = TH1F("hEnergyCluRc_mpgd","hEnergyClu MPGD; Energy [GeV]; Entries",n_bins,0,100)
   hEnergyCluSim_baseline = TH1F("hEnergyCluSim_baseline","hEnergyClu baseline; Energy [GeV]; Entries",n_bins,0,100)
   

   hEnergyCluSim_mpgd = TH1F("hEnergyCluSim_mpgd","hEnergyClu MPGD; Energy [GeV]; Entries",n_bins,0,100)
   hEnergyCluSim_mpgd_correct = TH1F("hEnergyCluSim_mpgd_correct","hEnergyClu MPGD correct; Energy [GeV]; Entries",n_bins,0,100)
   hEnergySim = TH1F("hEnergySim","hEnergy MC pion",n_bins,0,100)
   hEnergyRc_mpgd = TH1F("hEnergyRc_mpgd","hEnergy Rc pion MPGD",500,0,100)
   hEnergyRc_baseline = TH1F("hEnergyRc_baseline","hEnergy Rc pion baseline",500,0,100)
   
   hEtaCluRc_baseline = TH1F("hEtaCluRc_baseline","hEnergyClu baseline; #eta;efficiency",20,-5,5)
   hEtaCluRc_mpgd = TH1F("hEtaCluRc_mpgd","hEnergyClu MPGD; #eta;efficiency",20,-5,5)
   hEtaCluSim_baseline = TH1F("hEtaCluSim_baseline","hEnergyClu baseline; #eta;efficiency",20,-5,5)
   hEtaCluSim_mpgd = TH1F("hEtaCluSim_mpgd","hEnergyClu MPGD; #eta;efficiency",20,-5,5)
   hEtaSim = TH1F("hEtaSim","hEnergy MC pion; #eta;efficiency",20,-5,5)
   hEtaRc_mpgd = TH1F("hEtaRc_mpgd","hEnergy Rc pion MPGD; #eta;efficiency",20,-5,5)
   hEtaRc_baseline = TH1F("hEtaRc_baseline","hEnergy Rc pion baseline; #eta;efficiency",20,-5,5)
   
   hEneCluRc_baseline = TH1F("hEneCluRc_baseline","hEnergyClu baseline; Energy [GeV];efficiency",n_bins,0,100)
   hEneCluRc_mpgd = TH1F("hEneCluRc_mpgd","hEnergyClu MPGD; #eta;efficiency",n_bins,0,100)
   hEneCluSim_baseline = TH1F("hEneCluSim_baseline","hEnergyClu baseline; #eta;efficiency",n_bins,0,100)
   hEneCluSim_mpgd = TH1F("hEneCluSim_mpgd","hEnergyClu MPGD; #eta;efficiency",n_bins,0,100)
   hEneSim = TH1F("hEneSim","hEnergy MC pion; #eta;efficiency",n_bins,0,100)
   hEneRc_mpgd = TH1F("hEneRc_mpgd","hEnergy Rc pion MPGD; #eta;efficiency",n_bins,0,100)
   hEneRc_baseline = TH1F("hEneRc_baseline","hEnergy Rc pion baseline; #eta;efficiency",n_bins,0,100)
   
   hdRCluSim_baseline = TH1F("hdRCluSim_baseline","hdRCluSim",100,0,0.3)
   hdRCluSim_mpgd = TH1F("hdRCluSim_mpgd","hdRCluSim",100,0,0.3)
   
   hdRCluHit_baseline = TH1F("hdRCluSim_mpgd","hdRCluSim; #Delta R_{min}; Entries",100,0,0.3)
   hdRCluHit_mpgd = TH1F("hdRCluSim_mpgd","hdRCluSim; #Delta R_{min}; Entries",100,0,0.3)
   
   hdRCluRc_baseline = TH1F("hdRCluRc_baseline","hdRCluRc",100,0,0.3)
   hdRCluRc_mpgd = TH1F("hdRCluRc_mpgd","hdRCluRc",100,0,0.3)
   hdRSimRc_baseline = TH1F("hdRSimRc_baseline","hdRSimRc",100,0,0.3)
   hdRSimRc_mpgd = TH1F("hdRSimRc_mpgd","hdRSimRc",100,0,0.3)
   
   hClusterNumber = TH1F("hClusterNumber","; n_{clu};Events",50,0,50)
   
   #calibration parameters 
   intercept =  0.947
   slope =  0.323
   
   N = ch1.GetEntries()
   M = ch2.GetEntries()
   print(N)
   print(M)
   
   #eventi di pioni che non showerano in ECAL (n_EcalHit <= 50)
   """
   if subdir == "Gun_pi_1GeV":
      noShowerEve_list =[2, 11, 12, 21, 29, 30, 31, 32, 37, 38, 46, 49, 50, 66, 68, 75, 81, 87, 92, 94, 97, 105, 110, 112, 120, 122, 129, 132, 137, 150, 156, 158, 166, 170, 173, 183, 184, 189, 193, 213, 224, 227, 230, 232, 233, 235, 239, 248, 256, 258, 260, 267, 270, 274, 281, 288, 292, 298, 300, 303, 315, 327, 339, 343, 353, 355, 365, 374, 386, 387, 412, 420, 425, 426, 432, 443, 449, 458, 467, 472, 476, 479, 492, 494, 497, 502, 511, 513, 524, 543, 546, 547, 557, 564, 567, 589, 597, 604, 612, 616, 620, 641, 652, 667, 677, 689, 704, 709, 715, 729, 730, 732, 734, 736, 738, 754, 757, 758, 762, 775, 784, 800, 803, 808, 809, 820, 821, 833, 837, 857, 869, 876, 880, 882, 890, 896, 908, 916, 925, 933, 941, 950, 969, 970, 989, 994, 1004, 1011, 1013, 1015, 1024, 1039, 1052, 1055, 1061, 1070, 1080, 1089, 1098, 1100, 1111, 1114, 1116, 1124, 1140, 1143, 1146, 1148, 1164, 1170, 1184, 1209, 1218, 1231, 1234, 1246, 1250, 1252, 1253, 1254, 1270, 1276, 1292, 1295, 1303, 1306, 1315, 1326, 1339, 1341, 1357, 1362, 1371, 1372, 1377, 1394, 1400, 1414, 1428, 1432, 1438, 1443, 1458, 1459, 1468, 1469, 1470, 1471, 1478, 1480, 1483, 1486, 1496, 1502, 1507, 1520, 1522, 1525, 1526, 1528, 1530, 1534, 1540, 1544, 1553, 1572, 1575, 1595, 1600, 1607, 1608, 1617, 1621, 1629, 1630, 1642, 1643, 1650, 1653, 1659, 1664, 1670, 1676, 1678, 1679, 1682, 1691, 1694, 1707, 1708, 1709, 1713, 1716, 1732, 1733, 1735, 1736, 1743, 1745, 1749, 1750, 1755, 1764, 1775, 1776, 1786, 1803, 1811, 1819, 1824, 1826, 1832, 1836, 1837, 1853, 1857, 1867, 1871, 1881, 1884, 1887, 1913, 1915, 1926, 1929, 1939, 1945, 1947, 1951, 1961, 1968, 1971, 1975, 1981, 1993, 1994, 2004, 2013, 2014, 2018, 2023, 2025, 2033, 2035, 2036, 2038, 2039, 2053, 2060, 2069, 2079, 2081, 2093, 2105, 2121, 2146, 2152, 2157, 2160, 2164, 2165, 2200, 2201, 2204, 2206, 2234, 2238, 2251, 2253, 2255, 2259, 2263, 2275, 2279, 2288, 2290, 2294, 2302, 2304, 2313, 2316, 2317, 2324, 2353, 2370, 2376, 2392, 2396, 2404, 2410, 2415, 2418, 2424, 2428, 2439, 2452, 2463, 2481, 2485, 2508, 2515, 2522, 2525, 2528, 2531, 2542, 2546, 2565, 2567, 2580, 2588, 2589, 2590, 2616, 2617, 2622, 2625, 2629, 2634, 2637, 2640, 2641, 2644, 2658, 2661, 2666, 2668, 2682, 2700, 2704, 2710, 2714, 2720, 2724, 2728, 2732, 2733, 2737, 2738, 2739, 2747, 2756, 2762, 2763, 2764, 2771, 2776, 2788, 2795, 2847, 2850, 2886, 2910, 2918, 2919, 2944, 2959, 2960, 2966, 2974, 2976, 2977, 2988, 2995, 2997, 2998, 3006, 3027, 3034, 3037, 3056, 3064, 3066, 3070, 3076, 3087, 3088, 3090, 3096, 3098, 3109, 3112, 3115, 3118, 3129, 3134, 3138, 3143, 3147, 3148, 3150, 3157, 3160, 3161, 3168, 3176, 3179, 3186, 3187, 3215, 3217, 3222, 3224, 3233, 3241, 3245, 3258, 3271, 3292, 3300, 3308, 3312, 3313, 3314, 3316, 3329, 3330, 3333, 3336, 3337, 3344, 3349, 3363, 3373, 3374, 3377, 3399, 3400, 3401, 3402, 3404, 3406, 3413, 3418, 3422, 3431, 3435, 3442, 3458, 3466, 3474, 3484, 3489, 3491, 3502, 3504, 3522, 3525, 3528, 3543, 3562, 3572, 3575, 3583, 3610, 3615, 3617, 3628, 3630, 3633, 3634, 3649, 3666, 3676, 3681, 3695, 3696, 3698, 3700, 3710, 3715, 3718, 3725, 3729, 3733, 3734, 3747, 3753, 3754, 3755, 3757, 3767, 3778, 3788, 3796, 3798, 3808, 3815, 3816, 3842, 3845, 3848, 3866, 3875, 3882, 3883, 3898, 3899, 3901, 3911, 3912, 3917, 3920, 3954, 3956, 3959, 3970, 3981, 3987, 3997, 4001, 4010, 4017, 4020, 4029, 4039, 4043, 4057, 4065, 4068, 4074, 4075, 4088, 4090, 4094, 4097, 4101, 4104, 4117, 4118, 4124, 4131, 4134, 4140, 4160, 4165, 4166, 4180, 4181, 4191, 4192, 4210, 4213, 4220, 4224, 4225, 4241, 4243, 4244, 4247, 4264, 4265, 4289, 4291, 4295, 4304, 4307, 4323, 4331, 4348, 4350, 4352, 4365, 4379, 4381, 4394, 4412, 4424, 4429, 4437, 4442, 4448, 4461, 4463, 4468, 4472, 4481, 4482, 4493, 4495, 4508, 4510, 4530, 4531, 4534, 4536, 4564, 4573, 4574, 4592, 4612, 4621, 4624, 4637, 4640, 4648, 4664, 4665, 4669, 4670, 4676, 4677, 4685, 4686, 4693, 4700, 4705, 4706, 4730, 4736, 4748, 4751, 4771, 4773, 4775, 4778, 4786, 4797, 4803, 4835, 4843, 4848, 4850, 4857, 4867, 4877, 4889, 4891, 4900, 4901, 4903, 4914, 4916, 4925, 4930, 4934, 4960, 4969, 4979, 4982, 4993, 4994, 5002, 5004, 5005, 5027, 5037, 5046, 5048, 5049, 5054, 5055, 5056, 5080, 5107, 5109, 5120, 5126, 5140, 5170, 5189, 5194, 5196, 5203, 5211, 5225, 5228, 5229, 5233, 5245, 5276, 5280, 5289, 5293, 5307, 5312, 5314, 5316, 5347, 5353, 5363, 5365, 5391, 5403, 5407, 5416, 5427, 5431, 5438, 5442, 5456, 5466, 5476, 5484, 5491, 5501, 5511, 5517, 5519, 5522, 5536, 5554, 5563, 5580, 5585, 5614, 5615, 5618, 5638, 5648, 5654, 5664, 5682, 5694, 5704, 5719, 5721, 5730, 5746, 5748, 5756, 5760, 5783, 5798, 5806, 5809, 5811, 5829, 5834, 5843, 5853, 5857, 5865, 5868, 5892, 5901, 5913, 5915, 5922, 5941, 5949, 5974, 5985, 5989, 5990, 5994, 6013, 6034, 6052, 6056, 6067, 6071, 6074, 6084, 6105, 6109, 6114, 6116, 6128, 6136, 6141, 6150, 6158, 6172, 6178, 6185, 6193, 6198, 6201, 6202, 6219, 6223, 6224, 6226, 6229, 6231, 6233, 6235, 6236, 6240, 6242, 6255, 6271, 6283, 6291, 6294, 6306, 6314, 6325, 6328, 6350, 6351, 6353, 6354, 6364, 6368, 6413, 6425, 6443, 6447, 6460, 6462, 6463, 6471, 6477, 6480, 6484, 6486, 6487, 6495, 6496, 6500, 6502, 6508, 6509, 6520, 6521, 6528, 6545, 6555, 6558, 6559, 6562, 6563, 6564, 6571, 6572, 6609, 6623, 6624, 6629, 6648, 6659, 6660, 6663, 6686, 6691, 6699, 6712, 6723, 6725, 6726, 6741, 6764, 6765, 6772, 6774, 6779, 6792, 6801, 6803, 6823, 6831, 6835, 6841, 6843, 6853, 6854, 6855, 6857, 6869, 6890, 6897, 6899, 6902, 6912, 6935, 6940, 6946, 6947, 6953, 6955, 6972, 6973, 6975, 6978, 6979, 6980, 6981, 6988, 6995, 6998, 7001, 7006, 7015, 7022, 7024, 7048, 7053, 7060, 7073, 7075, 7078, 7082, 7091, 7096, 7116, 7134, 7136, 7151, 7157, 7167, 7174, 7182, 7185, 7213, 7218, 7225, 7233, 7234, 7250, 7256, 7263, 7265, 7269, 7275, 7281, 7316, 7327, 7341, 7345, 7348, 7349, 7352, 7358, 7363, 7369, 7383, 7408, 7417, 7420, 7430, 7432, 7435, 7436, 7443, 7447, 7488, 7490, 7495, 7504, 7506, 7508, 7518, 7519, 7521, 7522, 7529, 7538, 7548, 7554, 7555, 7570, 7580, 7581, 7594, 7595, 7606, 7633, 7637, 7644, 7646, 7647, 7660, 7675, 7676, 7678, 7691, 7692, 7694, 7705, 7710, 7714, 7719, 7723, 7733, 7761, 7773, 7782, 7798, 7809, 7816, 7819, 7836, 7864, 7876, 7877, 7878, 7890, 7898, 7911, 7913, 7918, 7922, 7936, 7947, 7954, 7964, 7974, 7977, 7991, 7992, 7994, 7996, 7998, 8013, 8015, 8024, 8026, 8038, 8047, 8068, 8069, 8079, 8095, 8110, 8114, 8115, 8126, 8135, 8149, 8150, 8166, 8167, 8172, 8175, 8182, 8186, 8188, 8192, 8197, 8205, 8208, 8210, 8212, 8242, 8249, 8255, 8262, 8263, 8267, 8269, 8277, 8290, 8291, 8295, 8309, 8325, 8327, 8330, 8334, 8339, 8342, 8344, 8350, 8362, 8375, 8376, 8395, 8405, 8410, 8418, 8419, 8420, 8424, 8434, 8438, 8440, 8453, 8458, 8459, 8469, 8472, 8480, 8482, 8484, 8492, 8511, 8519, 8531, 8551, 8557, 8572, 8590, 8591, 8595, 8597, 8605, 8609, 8638, 8645, 8646, 8651, 8652, 8660, 8662, 8663, 8667, 8670, 8671, 8676, 8679, 8685, 8702, 8707, 8722, 8741, 8744, 8759, 8761, 8768, 8778, 8784, 8785, 8795, 8805, 8813, 8814, 8819, 8821, 8823, 8845, 8854, 8866, 8874, 8876, 8886, 8890, 8908, 8921, 8925, 8927, 8932, 8937, 8947, 8957, 8958, 8962, 8965, 8969, 8983, 8996, 8998, 9003, 9004, 9007, 9013, 9014, 9016, 9040, 9055, 9059, 9068, 9073, 9077, 9084, 9088, 9096, 9100, 9102, 9125, 9126, 9127, 9131, 9138, 9144, 9146, 9149, 9153, 9175, 9184, 9185, 9189, 9193, 9197, 9208, 9211, 9212, 9216, 9217, 9225, 9228, 9230, 9236, 9239, 9240, 9246, 9254, 9255, 9259, 9264, 9265, 9271, 9278, 9280, 9282, 9288, 9291, 9299, 9301, 9308, 9313, 9332, 9338, 9342, 9347, 9354, 9356, 9369, 9394, 9398, 9403, 9412, 9417, 9428, 9434, 9436, 9447, 9456, 9462, 9467, 9470, 9472, 9476, 9478, 9479, 9499, 9501, 9509, 9526, 9532, 9535, 9541, 9543, 9545, 9556, 9557, 9569, 9570, 9572, 9578, 9596, 9599, 9620, 9630, 9631, 9634, 9638, 9640, 9653, 9661, 9668, 9675, 9679, 9697, 9700, 9715, 9719, 9720, 9726, 9735, 9748, 9752, 9761, 9763, 9769, 9774, 9782, 9784, 9807, 9808, 9812, 9819, 9824, 9836, 9846, 9853, 9859, 9876, 9898, 9917, 9929, 9931, 9932, 9933, 9946, 9950, 9952, 9970, 9972, 9973, 9974, 9982, 9986, 9989]
   
   if subdir == "Gun_pi_5GeV":
      noShowerEve_list = [2, 4, 17, 33, 38, 49, 54, 60, 68, 89, 92, 110, 112, 117, 127, 149, 152, 159, 160, 168, 173, 177, 186, 192, 195, 199, 202, 213, 223, 289, 349, 354, 358, 368, 369, 387, 399, 404, 405, 407, 443, 447, 457, 458, 459, 462, 468, 499, 502, 508, 513, 519, 529, 538, 539, 540, 542, 548, 551, 555, 557, 562, 579, 590, 597, 604, 614, 619, 635, 639, 643, 650, 653, 654, 660, 661, 664, 666, 672, 673, 683, 689, 692, 711, 718, 740, 745, 746, 747, 763, 768, 771, 776, 799, 812, 813, 818, 833, 835, 848, 865, 870, 871, 886, 898, 901, 905, 919, 921, 930, 933, 940, 949, 954, 959, 971, 975, 979, 984, 991, 1000, 1006, 1009, 1013, 1021, 1038, 1041, 1057, 1058, 1065, 1068, 1073, 1081, 1082, 1101, 1109, 1111, 1114, 1125, 1126, 1127, 1133, 1140, 1146, 1149, 1154, 1162, 1174, 1183, 1188, 1197, 1201, 1215, 1218, 1220, 1222, 1225, 1231, 1236, 1240, 1242, 1249, 1251, 1258, 1273, 1282, 1286, 1303, 1305, 1314, 1318, 1320, 1333, 1336, 1345, 1361, 1364, 1365, 1381, 1388, 1397, 1407, 1414, 1416, 1417, 1422, 1426, 1427, 1445, 1452, 1453, 1454, 1458, 1476, 1479, 1499, 1502, 1507, 1514, 1528, 1533, 1539, 1569, 1595, 1607, 1608, 1616, 1619, 1623, 1634, 1638, 1653, 1655, 1656, 1660, 1663, 1670, 1691, 1692, 1693, 1706, 1707, 1716, 1719, 1723, 1727, 1729, 1733, 1734, 1737, 1750, 1761, 1768, 1770, 1777, 1780, 1781, 1783, 1784, 1787, 1799, 1801, 1803, 1808, 1818, 1819, 1821, 1826, 1835, 1841, 1843, 1844, 1853, 1865, 1874, 1885, 1887, 1912, 1915, 1919, 1929, 1931, 1939, 1959, 1960, 1964, 1965, 1969, 1973, 1980, 1981, 1991, 2002, 2013, 2018, 2020, 2021, 2023, 2039, 2042, 2043, 2049, 2064, 2075, 2086, 2090, 2092, 2105, 2129, 2131, 2139, 2148, 2155, 2158, 2160, 2165, 2166, 2214, 2217, 2233, 2236, 2248, 2255, 2260, 2263, 2268, 2271, 2309, 2311, 2324, 2329, 2330, 2332, 2336, 2341, 2343, 2351, 2358, 2368, 2371, 2372, 2383, 2387, 2396, 2403, 2406, 2410, 2412, 2418, 2422, 2428, 2443, 2452, 2456, 2475, 2480, 2483, 2486, 2515, 2520, 2532, 2534, 2535, 2548, 2555, 2560, 2563, 2571, 2577, 2580, 2585, 2590, 2592, 2595, 2599, 2633, 2643, 2647, 2648, 2649, 2653, 2656, 2673, 2675, 2685, 2690, 2697, 2700, 2712, 2718, 2719, 2727, 2734, 2740, 2749, 2750, 2767, 2770, 2776, 2782, 2794, 2810, 2817, 2818, 2829, 2840, 2842, 2844, 2861, 2863, 2877, 2881, 2883, 2892, 2905, 2931, 2940, 2956, 2958, 2960, 2968, 2976, 2985, 2991, 2993, 2998, 3003, 3006, 3007, 3014, 3019, 3024, 3035, 3041, 3050, 3057, 3060, 3108, 3112, 3113, 3117, 3120, 3123, 3125, 3126, 3140, 3150, 3154, 3162, 3191, 3202, 3203, 3224, 3239, 3246, 3247, 3269, 3276, 3279, 3282, 3297, 3305, 3310, 3311, 3312, 3326, 3329, 3330, 3351, 3354, 3357, 3365, 3366, 3371, 3378, 3386, 3387, 3392, 3398, 3411, 3422, 3428, 3435, 3436, 3437, 3440, 3467, 3471, 3472, 3473, 3484, 3497, 3499, 3506, 3515, 3517, 3532, 3557, 3573, 3578, 3582, 3594, 3596, 3606, 3619, 3621, 3623, 3628, 3646, 3647, 3652, 3653, 3659, 3665, 3666, 3668, 3669, 3693, 3716, 3729, 3753, 3759, 3765, 3771, 3776, 3777, 3783, 3791, 3806, 3816, 3834, 3841, 3846, 3850, 3854, 3860, 3869, 3883, 3885, 3891, 3897, 3908, 3918, 3920, 3932, 3939, 3949, 3956, 3957, 3966, 3968, 3969, 3970, 3977, 3979, 3983, 3988, 3994, 4006, 4008, 4020, 4021, 4041, 4047, 4048, 4050, 4057, 4075, 4084, 4085, 4088, 4089, 4104, 4120, 4150, 4155, 4156, 4169, 4177, 4178, 4179, 4183, 4199, 4201, 4220, 4221, 4222, 4233, 4235, 4238, 4247, 4249, 4253, 4259, 4281, 4284, 4285, 4303, 4305, 4309, 4310, 4312, 4331, 4342, 4346, 4347, 4348, 4358, 4365, 4375, 4378, 4391, 4399, 4408, 4410, 4420, 4422, 4423, 4426, 4430, 4432, 4434, 4438, 4447, 4451, 4459, 4473, 4488, 4499, 4500, 4502, 4508, 4509, 4513, 4535, 4553, 4555, 4559, 4566, 4571, 4578, 4587, 4589, 4591, 4599, 4602, 4607, 4615, 4620, 4630, 4631, 4634, 4665, 4680, 4682, 4724, 4729, 4742, 4752, 4769, 4775, 4778, 4785, 4796, 4799, 4807, 4808, 4818, 4827, 4830, 4831, 4847, 4851, 4854, 4860, 4863, 4865, 4866, 4881, 4882, 4889, 4890, 4891, 4893, 4897, 4901, 4902, 4907, 4914, 4916, 4932, 4934, 4948, 4956, 4961, 4975, 4977, 4999, 5008, 5013, 5020, 5025, 5026, 5028, 5059, 5063, 5064, 5068, 5090, 5096, 5098, 5099, 5104, 5108, 5113, 5115, 5119, 5124, 5132, 5146, 5148, 5149, 5158, 5183, 5184, 5196, 5201, 5209, 5210, 5222, 5224, 5227, 5250, 5253, 5259, 5267, 5268, 5273, 5277, 5286, 5307, 5310, 5316, 5321, 5340, 5346, 5356, 5383, 5391, 5408, 5410, 5411, 5426, 5437, 5469, 5478, 5495, 5505, 5517, 5520, 5531, 5544, 5546, 5547, 5549, 5556, 5561, 5564, 5565, 5567, 5568, 5569, 5572, 5581, 5597, 5604, 5616, 5623, 5641, 5644, 5647, 5654, 5655, 5660, 5664, 5668, 5680, 5681, 5699, 5701, 5717, 5719, 5726, 5735, 5757, 5762, 5770, 5787, 5788, 5790, 5793, 5795, 5802, 5803, 5815, 5820, 5829, 5833, 5836, 5852, 5857, 5867, 5871, 5881, 5911, 5913, 5938, 5947, 5950, 5953, 5956, 5970, 5983, 5994, 5995, 6006, 6016, 6035, 6060, 6064, 6081, 6090, 6091, 6092, 6094, 6096, 6102, 6107, 6109, 6116, 6140, 6143, 6151, 6153, 6164, 6172, 6178, 6180, 6204, 6205, 6211, 6212, 6221, 6222, 6228, 6235, 6240, 6241, 6242, 6245, 6250, 6261, 6270, 6279, 6299, 6313, 6319, 6330, 6332, 6333, 6336, 6340, 6341, 6342, 6343, 6344, 6355, 6361, 6364, 6367, 6369, 6382, 6385, 6386, 6392, 6404, 6407, 6408, 6423, 6424, 6427, 6428, 6430, 6433, 6436, 6440, 6456, 6457, 6460, 6465, 6473, 6478, 6481, 6494, 6498, 6506, 6523, 6524, 6525, 6531, 6542, 6562, 6574, 6583, 6590, 6594, 6626, 6630, 6662, 6664, 6683, 6685, 6693, 6695, 6709, 6727, 6736, 6740, 6742, 6749, 6757, 6763, 6765, 6767, 6779, 6781, 6785, 6788, 6792, 6797, 6799, 6803, 6806, 6848, 6857, 6885, 6890, 6902, 6903, 6905, 6911, 6912, 6918, 6931, 6935, 6940, 6945, 6957, 6960, 6961, 6975, 6979, 6980, 6983, 6992, 6993, 6999, 7003, 7007, 7018, 7033, 7042, 7064, 7091, 7094, 7095, 7107, 7119, 7120, 7123, 7133, 7134, 7138, 7141, 7148, 7154, 7156, 7159, 7165, 7167, 7185, 7188, 7200, 7208, 7234, 7238, 7247, 7248, 7251, 7256, 7259, 7277, 7287, 7292, 7298, 7299, 7305, 7310, 7311, 7317, 7323, 7327, 7332, 7337, 7352, 7361, 7363, 7366, 7375, 7378, 7389, 7394, 7396, 7403, 7443, 7463, 7464, 7470, 7476, 7481, 7488, 7489, 7491, 7508, 7539, 7548, 7559, 7571, 7578, 7591, 7595, 7600, 7603, 7614, 7617, 7623, 7625, 7628, 7637, 7638, 7643, 7649, 7653, 7661, 7663, 7681, 7682, 7690, 7698, 7702, 7703, 7707, 7708, 7711, 7730, 7732, 7735, 7744, 7768, 7770, 7790, 7792, 7794, 7799, 7801, 7808, 7821, 7830, 7842, 7852, 7855, 7859, 7863, 7866, 7875, 7877, 7881, 7882, 7892, 7897, 7907, 7936, 7939, 7957, 7977, 7984, 7986, 7987, 7989, 7993, 7999, 8000, 8015, 8021, 8022, 8023, 8040, 8042, 8051, 8055, 8066, 8070, 8080, 8084, 8093, 8094, 8101, 8103, 8108, 8118, 8120, 8121, 8124, 8126, 8128, 8129, 8136, 8139, 8141, 8143, 8153, 8156, 8160, 8168, 8169, 8171, 8182, 8186, 8195, 8203, 8210, 8216, 8218, 8222, 8223, 8249, 8256, 8259, 8267, 8277, 8279, 8292, 8297, 8298, 8299, 8307, 8313, 8320, 8324, 8327, 8337, 8344, 8371, 8375, 8376, 8380, 8382, 8383, 8389, 8392, 8395, 8399, 8409, 8411, 8415, 8418, 8424, 8425, 8426, 8449, 8451, 8454, 8464, 8466, 8481, 8482, 8487, 8490, 8491, 8495, 8500, 8507, 8512, 8513, 8517, 8526, 8528, 8530, 8531, 8540, 8550, 8552, 8563, 8565, 8566, 8575, 8576, 8585, 8591, 8592, 8598, 8602, 8609, 8611, 8613, 8617, 8623, 8635, 8641, 8643, 8647, 8662, 8671, 8686, 8704, 8706, 8723, 8729, 8730, 8731, 8741, 8743, 8745, 8778, 8780, 8781, 8792, 8808, 8822, 8826, 8847, 8849, 8859, 8865, 8873, 8888, 8894, 8901, 8911, 8914, 8916, 8921, 8922, 8928, 8937, 8950, 8965, 8966, 8967, 8968, 8975, 9000, 9016, 9038, 9054, 9058, 9060, 9066, 9071, 9079, 9086, 9103, 9109, 9118, 9120, 9136, 9137, 9143, 9146, 9147, 9149, 9152, 9163, 9165, 9169, 9173, 9180, 9181, 9213, 9215, 9216, 9219, 9221, 9225, 9234, 9237, 9241, 9259, 9263, 9269, 9272, 9281, 9283, 9288, 9292, 9304, 9306, 9311, 9316, 9337, 9344, 9355, 9358, 9363, 9370, 9378, 9385, 9393, 9403, 9409, 9417, 9443, 9445, 9446, 9457, 9476, 9483, 9484, 9520, 9536, 9545, 9550, 9554, 9567, 9574, 9582, 9593, 9600, 9602, 9609, 9615, 9617, 9630, 9636, 9638, 9639, 9644, 9661, 9664, 9677, 9686, 9691, 9692, 9698, 9699, 9705, 9708, 9724, 9725, 9726, 9727, 9733, 9737, 9739, 9748, 9751, 9766, 9772, 9774, 9787, 9789, 9790, 9791, 9794, 9813, 9852, 9856, 9861, 9862, 9866, 9871, 9876, 9878, 9887, 9893, 9894, 9906, 9909, 9917, 9925, 9928, 9935, 9944, 9974, 9986, 9990, 9997]
   
   if subdir == "Gun_pi_10GeV":
     noShowerEve_list = [5, 9, 11, 15, 16, 23, 29, 31, 32, 33, 43, 48, 59, 60, 70, 73, 75, 80, 105, 108, 111, 121, 129, 132, 135, 143, 153, 173, 193, 201, 223, 228, 267, 281, 286, 292, 312, 314, 319, 320, 329, 334, 347, 349, 355, 357, 364, 370, 376, 387, 391, 396, 400, 405, 407, 410, 412, 431, 435, 436, 442, 446, 499, 500, 506, 509, 512, 534, 543, 544, 549, 553, 554, 557, 559, 570, 575, 583, 597, 603, 608, 612, 613, 616, 617, 624, 635, 639, 641, 658, 664, 667, 669, 676, 682, 683, 692, 701, 704, 715, 725, 731, 746, 759, 761, 762, 763, 765, 771, 772, 781, 789, 820, 837, 842, 843, 845, 848, 860, 870, 871, 874, 878, 882, 891, 905, 921, 932, 934, 935, 951, 968, 976, 985, 988, 991, 1001, 1025, 1032, 1034, 1035, 1059, 1061, 1062, 1073, 1091, 1101, 1109, 1122, 1125, 1127, 1133, 1140, 1144, 1159, 1160, 1193, 1194, 1197, 1215, 1217, 1227, 1235, 1241, 1250, 1258, 1262, 1273, 1280, 1312, 1319, 1331, 1337, 1348, 1354, 1355, 1358, 1360, 1381, 1408, 1411, 1414, 1417, 1441, 1451, 1452, 1463, 1466, 1476, 1496, 1499, 1500, 1501, 1510, 1518, 1525, 1529, 1530, 1536, 1540, 1547, 1557, 1574, 1584, 1590, 1592, 1593, 1602, 1603, 1606, 1618, 1625, 1633, 1635, 1657, 1666, 1677, 1681, 1684, 1699, 1702, 1706, 1709, 1714, 1724, 1727, 1729, 1741, 1742, 1756, 1773, 1776, 1787, 1792, 1811, 1823, 1842, 1845, 1852, 1853, 1856, 1861, 1865, 1877, 1878, 1882, 1886, 1887, 1899, 1902, 1912, 1927, 1935, 1939, 1945, 1961, 1964, 1983, 1986, 2004, 2006, 2017, 2024, 2035, 2046, 2058, 2063, 2076, 2081, 2087, 2092, 2096, 2102, 2111, 2123, 2124, 2126, 2127, 2139, 2146, 2147, 2155, 2164, 2166, 2171, 2188, 2192, 2204, 2223, 2225, 2245, 2256, 2271, 2281, 2284, 2288, 2293, 2298, 2312, 2313, 2320, 2323, 2327, 2329, 2339, 2346, 2360, 2376, 2392, 2395, 2400, 2406, 2410, 2412, 2415, 2424, 2433, 2435, 2445, 2456, 2462, 2468, 2486, 2489, 2498, 2520, 2521, 2528, 2529, 2532, 2546, 2550, 2552, 2555, 2561, 2569, 2570, 2572, 2573, 2587, 2590, 2602, 2605, 2609, 2619, 2627, 2648, 2652, 2664, 2673, 2674, 2675, 2681, 2697, 2703, 2705, 2717, 2718, 2725, 2727, 2729, 2734, 2743, 2753, 2758, 2763, 2764, 2769, 2785, 2786, 2790, 2796, 2797, 2798, 2813, 2823, 2842, 2845, 2847, 2849, 2856, 2859, 2868, 2877, 2908, 2927, 2941, 2944, 2946, 2953, 2958, 2963, 2965, 2968, 2989, 3003, 3014, 3016, 3018, 3026, 3035, 3038, 3041, 3045, 3047, 3051, 3052, 3053, 3055, 3057, 3061, 3064, 3067, 3068, 3069, 3076, 3079, 3086, 3092, 3102, 3112, 3127, 3129, 3140, 3153, 3162, 3174, 3177, 3200, 3202, 3206, 3227, 3244, 3250, 3265, 3277, 3279, 3292, 3295, 3301, 3305, 3319, 3320, 3325, 3335, 3342, 3345, 3349, 3351, 3365, 3366, 3368, 3379, 3386, 3387, 3416, 3428, 3440, 3460, 3463, 3470, 3475, 3476, 3478, 3487, 3504, 3506, 3540, 3542, 3557, 3559, 3571, 3573, 3581, 3585, 3590, 3599, 3617, 3622, 3627, 3634, 3647, 3650, 3652, 3659, 3660, 3671, 3673, 3677, 3702, 3708, 3715, 3725, 3743, 3753, 3754, 3759, 3788, 3816, 3819, 3827, 3830, 3831, 3837, 3841, 3844, 3846, 3849, 3859, 3863, 3874, 3875, 3876, 3897, 3908, 3929, 3930, 3936, 3966, 3990, 3998, 4013, 4025, 4034, 4039, 4040, 4050, 4052, 4064, 4072, 4073, 4076, 4082, 4083, 4104, 4105, 4119, 4131, 4139, 4146, 4148, 4160, 4168, 4172, 4204, 4206, 4210, 4213, 4217, 4222, 4225, 4227, 4233, 4239, 4255, 4257, 4263, 4264, 4270, 4275, 4279, 4304, 4305, 4322, 4331, 4338, 4356, 4376, 4387, 4391, 4416, 4427, 4445, 4447, 4448, 4463, 4465, 4466, 4475, 4486, 4488, 4502, 4505, 4506, 4518, 4549, 4553, 4555, 4556, 4569, 4586, 4592, 4602, 4607, 4610, 4612, 4615, 4616, 4621, 4654, 4661, 4672, 4680, 4686, 4692, 4695, 4706, 4709, 4717, 4727, 4730, 4741, 4744, 4745, 4749, 4769, 4773, 4775, 4782, 4786, 4787, 4802, 4812, 4820, 4822, 4831, 4843, 4854, 4857, 4859, 4860, 4882, 4892, 4901, 4907, 4923, 4925, 4938, 4945, 4946, 4951, 4956, 4957, 4969, 4972, 4981, 4982, 4990, 4994, 5002, 5003, 5028, 5035, 5045, 5058, 5066, 5087, 5089, 5098, 5101, 5103, 5108, 5110, 5111, 5116, 5130, 5136, 5137, 5139, 5143, 5183, 5191, 5195, 5196, 5204, 5219, 5223, 5230, 5246, 5250, 5253, 5255, 5256, 5268, 5273, 5277, 5287, 5297, 5310, 5311, 5316, 5320, 5332, 5341, 5346, 5375, 5383, 5384, 5392, 5402, 5411, 5421, 5429, 5433, 5435, 5441, 5443, 5447, 5451, 5458, 5463, 5477, 5480, 5484, 5487, 5489, 5491, 5515, 5518, 5525, 5526, 5532, 5535, 5539, 5541, 5549, 5551, 5560, 5562, 5567, 5571, 5575, 5578, 5590, 5592, 5603, 5623, 5624, 5648, 5663, 5689, 5700, 5717, 5725, 5728, 5732, 5740, 5762, 5776, 5799, 5806, 5807, 5819, 5829, 5830, 5837, 5846, 5868, 5869, 5881, 5882, 5884, 5886, 5893, 5921, 5931, 5935, 5940, 5943, 5948, 5951, 5952, 5970, 5975, 5979, 6002, 6006, 6009, 6025, 6027, 6030, 6034, 6036, 6038, 6040, 6044, 6054, 6055, 6076, 6077, 6086, 6090, 6098, 6102, 6103, 6107, 6108, 6112, 6125, 6137, 6159, 6182, 6183, 6188, 6191, 6199, 6200, 6205, 6207, 6208, 6219, 6222, 6229, 6234, 6241, 6248, 6257, 6265, 6274, 6278, 6285, 6297, 6300, 6318, 6339, 6340, 6343, 6350, 6352, 6361, 6367, 6374, 6375, 6400, 6404, 6406, 6418, 6424, 6425, 6445, 6470, 6475, 6497, 6498, 6502, 6504, 6520, 6523, 6534, 6543, 6547, 6561, 6565, 6570, 6576, 6581, 6584, 6591, 6597, 6612, 6621, 6625, 6637, 6644, 6646, 6651, 6665, 6678, 6694, 6702, 6703, 6709, 6716, 6720, 6726, 6727, 6733, 6762, 6763, 6766, 6779, 6782, 6790, 6793, 6801, 6803, 6815, 6826, 6839, 6848, 6853, 6859, 6880, 6891, 6892, 6898, 6899, 6908, 6910, 6913, 6915, 6916, 6932, 6933, 6935, 6937, 6940, 6949, 6950, 6954, 6968, 6973, 6993, 6994, 6995, 7000, 7013, 7041, 7044, 7049, 7061, 7064, 7066, 7073, 7104, 7111, 7116, 7121, 7126, 7133, 7134, 7135, 7140, 7144, 7150, 7156, 7159, 7163, 7165, 7179, 7185, 7195, 7208, 7221, 7226, 7227, 7231, 7232, 7250, 7269, 7285, 7303, 7306, 7310, 7325, 7340, 7358, 7372, 7374, 7395, 7404, 7415, 7441, 7454, 7455, 7466, 7472, 7475, 7482, 7483, 7484, 7495, 7497, 7499, 7500, 7501, 7502, 7506, 7508, 7509, 7522, 7523, 7531, 7548, 7551, 7553, 7556, 7557, 7560, 7562, 7571, 7585, 7600, 7602, 7610, 7611, 7616, 7617, 7625, 7628, 7638, 7641, 7649, 7655, 7667, 7673, 7679, 7685, 7692, 7693, 7694, 7696, 7699, 7702, 7714, 7720, 7724, 7735, 7752, 7769, 7777, 7784, 7786, 7801, 7807, 7819, 7823, 7837, 7842, 7844, 7849, 7854, 7866, 7868, 7874, 7875, 7876, 7882, 7889, 7892, 7905, 7910, 7914, 7927, 7937, 7938, 7946, 7947, 7954, 7963, 7969, 7970, 7971, 7976, 7990, 8016, 8022, 8031, 8043, 8049, 8051, 8060, 8062, 8064, 8065, 8066, 8079, 8085, 8091, 8100, 8106, 8107, 8114, 8116, 8119, 8144, 8152, 8165, 8168, 8172, 8185, 8187, 8188, 8207, 8230, 8234, 8244, 8259, 8266, 8268, 8278, 8285, 8289, 8290, 8294, 8299, 8304, 8337, 8340, 8350, 8352, 8362, 8363, 8373, 8396, 8401, 8409, 8419, 8423, 8424, 8428, 8441, 8449, 8451, 8454, 8455, 8476, 8477, 8479, 8481, 8493, 8498, 8500, 8504, 8522, 8538, 8540, 8561, 8565, 8572, 8583, 8585, 8586, 8590, 8595, 8599, 8601, 8619, 8625, 8628, 8641, 8668, 8671, 8677, 8681, 8685, 8686, 8694, 8697, 8698, 8710, 8711, 8730, 8731, 8736, 8754, 8763, 8764, 8765, 8772, 8798, 8809, 8833, 8839, 8840, 8848, 8906, 8933, 8939, 8945, 8959, 8963, 8967, 8971, 8981, 8990, 8994, 9000, 9001, 9003, 9014, 9016, 9031, 9047, 9050, 9054, 9055, 9072, 9093, 9109, 9119, 9125, 9129, 9152, 9156, 9165, 9166, 9167, 9188, 9189, 9210, 9225, 9235, 9254, 9263, 9266, 9275, 9290, 9303, 9306, 9308, 9326, 9332, 9364, 9365, 9379, 9393, 9399, 9406, 9433, 9443, 9448, 9467, 9489, 9491, 9496, 9523, 9529, 9569, 9576, 9585, 9586, 9591, 9597, 9614, 9619, 9621, 9624, 9625, 9627, 9628, 9634, 9684, 9689, 9693, 9699, 9700, 9703, 9704, 9705, 9707, 9709, 9713, 9723, 9731, 9740, 9744, 9751, 9770, 9772, 9773, 9779, 9783, 9785, 9791, 9807, 9812, 9815, 9818, 9829, 9839, 9847, 9864, 9866, 9873, 9876, 9880, 9887, 9888, 9903, 9909, 9923, 9945, 9949, 9951, 9957, 9973, 9982]
    
   if subdir == "Gun_pi_50GeV":
     noShowerEve_list = [2, 31, 60, 91, 97, 102, 148, 152, 156, 183, 189, 196, 226, 238, 241, 246, 250, 255, 272, 280, 288, 293, 318, 320, 327, 380, 391, 405, 411, 417, 446, 450, 455, 456, 459, 466, 468, 495, 503, 525, 534, 554, 573, 579, 602, 607, 628, 638, 652, 670, 671, 676, 711, 716, 751, 754, 775, 785, 791, 797, 833, 858, 859, 878, 879, 886, 918, 940, 941, 950, 969, 976, 979, 991, 1014, 1018, 1034, 1066, 1087, 1094, 1097, 1110, 1117, 1138, 1144, 1160, 1162, 1173, 1181, 1190, 1216, 1226, 1230, 1236, 1242, 1251, 1253, 1269, 1281, 1286, 1308, 1315, 1319, 1338, 1350, 1354, 1359, 1369, 1381, 1385, 1386, 1388, 1404, 1405, 1408, 1423, 1435, 1437, 1450, 1464, 1473, 1474, 1489, 1492, 1499, 1544, 1557, 1570, 1599, 1603, 1605, 1620, 1622, 1659, 1662, 1674, 1675, 1684, 1691, 1697, 1727, 1766, 1774, 1776, 1799, 1804, 1805, 1828, 1869, 1871, 1883, 1895, 1907, 1911, 1922, 1937, 1938, 1958, 1961, 1989, 2007, 2013, 2016, 2019, 2023, 2036, 2037, 2038, 2042, 2056, 2060, 2081, 2082, 2083, 2086, 2093, 2124, 2131, 2169, 2171, 2185, 2209, 2217, 2221, 2254, 2279, 2294, 2302, 2312, 2318, 2320, 2341, 2343, 2347, 2349, 2371, 2373, 2376, 2378, 2394, 2396, 2423, 2437, 2452, 2467, 2468, 2480, 2497, 2528, 2529, 2534, 2553, 2567, 2568, 2581, 2593, 2623, 2629, 2652, 2656, 2658, 2661, 2670, 2680, 2686, 2695, 2697, 2724, 2754, 2778, 2782, 2797, 2805, 2820, 2835, 2892, 2946, 2950, 2965, 2969, 3002, 3003, 3043, 3055, 3056, 3059, 3065, 3067, 3076, 3087, 3090, 3100, 3109, 3136, 3150, 3153, 3162, 3164, 3174, 3176, 3181, 3198, 3203, 3210, 3213, 3225, 3239, 3241, 3256, 3265, 3271, 3302, 3315, 3363, 3371, 3384, 3386, 3400, 3428, 3437, 3446, 3462, 3484, 3540, 3562, 3564, 3582, 3607, 3631, 3669, 3702, 3744, 3746, 3747, 3758, 3762, 3768, 3772, 3774, 3777, 3778, 3792, 3809, 3816, 3821, 3835, 3840, 3843, 3854, 3915, 3938, 3942, 3943, 3972, 3981, 3993, 4008, 4019, 4022, 4032, 4050, 4055, 4069, 4109, 4112, 4123, 4126, 4128, 4134, 4153, 4187, 4203, 4216, 4222, 4225, 4233, 4236, 4243, 4252, 4253, 4260, 4263, 4264, 4297, 4305, 4307, 4340, 4342, 4345, 4368, 4394, 4402, 4511, 4520, 4524, 4529, 4537, 4553, 4556, 4602, 4613, 4615, 4616, 4634, 4650, 4654, 4663, 4687, 4697, 4704, 4710, 4720, 4754, 4755, 4765, 4766, 4777, 4783, 4788, 4808, 4814, 4819, 4830, 4853, 4858, 4868, 4881, 4885, 4896, 4912, 4924, 4931, 4936, 4939, 4952, 4973, 4975, 4989, 5000, 5014, 5045, 5104, 5124, 5125, 5153, 5162, 5186, 5196, 5198, 5207, 5220, 5222, 5224, 5227, 5236, 5242, 5243, 5259, 5267, 5286, 5287, 5309, 5337, 5356, 5374, 5376, 5408, 5410, 5425, 5436, 5445, 5452, 5459, 5477, 5478, 5479, 5492, 5496, 5533, 5539, 5545, 5568, 5596, 5605, 5623, 5625, 5632, 5633, 5639, 5656, 5657, 5686, 5711, 5725, 5729, 5745, 5746, 5764, 5774, 5781, 5790, 5794, 5805, 5806, 5807, 5808, 5811, 5814, 5819, 5829, 5864, 5866, 5871, 5872, 5881, 5895, 5914, 5924, 5931, 5953, 5954, 5965, 5985, 6013, 6055, 6066, 6095, 6136, 6180, 6182, 6191, 6211, 6247, 6248, 6249, 6272, 6294, 6320, 6332, 6334, 6352, 6353, 6354, 6369, 6375, 6379, 6388, 6398, 6406, 6408, 6421, 6439, 6442, 6459, 6471, 6478, 6500, 6503, 6523, 6536, 6539, 6548, 6558, 6567, 6569, 6577, 6584, 6585, 6590, 6591, 6595, 6610, 6620, 6644, 6690, 6691, 6696, 6704, 6708, 6736, 6751, 6759, 6767, 6793, 6797, 6805, 6809, 6810, 6823, 6832, 6838, 6839, 6840, 6859, 6863, 6876, 6901, 6908, 6916, 6938, 6951, 6953, 6957, 6966, 6977, 6988, 6994, 7002, 7039, 7057, 7071, 7091, 7093, 7103, 7107, 7109, 7110, 7124, 7136, 7140, 7161, 7172, 7176, 7183, 7195, 7200, 7209, 7262, 7278, 7280, 7288, 7293, 7295, 7296, 7309, 7316, 7327, 7330, 7378, 7389, 7400, 7417, 7420, 7436, 7437, 7448, 7454, 7482, 7483, 7490, 7497, 7503, 7504, 7510, 7515, 7523, 7532, 7548, 7565, 7577, 7584, 7605, 7608, 7624, 7629, 7641, 7647, 7661, 7669, 7673, 7675, 7676, 7690, 7691, 7739, 7744, 7758, 7776, 7784, 7795, 7798, 7825, 7831, 7845, 7851, 7870, 7873, 7875, 7880, 7882, 7885, 7889, 7900, 7923, 7928, 7970, 7989, 8008, 8010, 8020, 8021, 8032, 8053, 8056, 8060, 8076, 8082, 8087, 8089, 8113, 8129, 8139, 8144, 8147, 8150, 8156, 8159, 8163, 8168, 8175, 8201, 8210, 8234, 8249, 8250, 8267, 8277, 8294, 8298, 8306, 8307, 8313, 8345, 8372, 8398, 8399, 8401, 8407, 8412, 8423, 8424, 8440, 8443, 8468, 8472, 8473, 8522, 8544, 8557, 8564, 8579, 8591, 8595, 8599, 8609, 8612, 8616, 8642, 8659, 8660, 8676, 8697, 8706, 8719, 8738, 8739, 8763, 8797, 8819, 8834, 8870, 8912, 8923, 8932, 8937, 8964, 8983, 9002, 9017, 9040, 9052, 9068, 9072, 9081, 9089, 9118, 9122, 9150, 9152, 9155, 9156, 9158, 9160, 9165, 9173, 9179, 9182, 9183, 9189, 9190, 9191, 9216, 9225, 9239, 9248, 9252, 9256, 9269, 9315, 9316, 9324, 9328, 9358, 9360, 9371, 9400, 9403, 9452, 9486, 9492, 9500, 9508, 9511, 9520, 9560, 9570, 9572, 9583, 9595, 9599, 9609, 9614, 9620, 9645, 9652, 9659, 9661, 9664, 9699, 9705, 9719, 9738, 9744, 9788, 9804, 9822, 9856, 9894, 9897, 9899, 9907, 9923, 9939, 9964, 9966, 9984, 9998]
    """ 
  
   #for i in range(N):
   #print("Number of events: ", len(noShowerEve_list))
   #for event in range(len(noShowerEve_list)):
    #i = noShowerEve_list[event]
   for i in range(N):
    ch1.GetEntry(i)
    ch2.GetEntry(i)
    #print("cl ene=",ch1.clene[0])
    print("----- event", i)
    clenesize_base = len(ch1.clene)
    print("cl ene size in baseline =",clenesize_base)
    print("cl ene size in modified =",len(ch2.clene))
    hClusterNumber.Fill(len(ch2.clene))
    if len(ch2.clene) == 1 :
      for i, st , ene, mcpx, mcpy,mcpz in zip(ch2.mcpdg, ch2.mcgst, ch2.mcene, ch2.mcmox,ch2.mcmoy,ch2.mcmoz):
        if (abs(i)==part_ID and st==1):
            simPartVec = TLorentzVector()
            simPartVec.SetPxPyPzE(mcpx,mcpy,mcpz,ene)
            simPart3Vec = simPartVec.Vect()
            hEneSim.Fill(ene)    ###DENOMINATOR Energy Efficiency Clu-MC
            hEtaSim.Fill(simPartVec.Eta()) ###DENOMINATOR Eta Efficiency Clu-MC
            
            #### LOOP ON ALL CLUSTERS PIONS IN BASELINE ####
            dRCluSim = 1000
            
            for clx,cly,clz,cle in zip(ch1.clpox, ch1.clpoy, ch1.clpoz, ch1.clene):
              clPos = TVector3()
              clPos.SetXYZ(clx, cly, clz)
              
              #HCAL_hit = False #imposta la booleana per capire se Hclu EClu mixedClu, if mixed break
              #ECAL_hit = False
              always_true = True
              
              #OPEN LOOP on hits 
              """
              for hitori, hitx,hity,hitz,hite in zip(ch1.caori, ch1.capox, ch1.capoy, ch1.capoz, ch1.caene):
                hitPos = TVector3()
                hitPos.SetXYZ(hitx, hity, hitz)
                dRCluHit = hitPos.DrEtaPhi(clPos)
              
                if(dRCluHit<0.3):
                  hitR = math.sqrt(hitx*hitx + hity*hity)
                  hitzAbs = math.sqrt(hitz*hitz)
                  
                  #............SELEZIONE
                  if hitori== 4 or hitori==5:
                    ECAL_hit = True
                    
                  elif hitori == 7 or hitori == 8 or hitori == 9:
                    HCAL_hit = True
                    hdRCluHit_baseline.Fill(dRCluHit)
                  
              """     
              #CLOSE LOOP on hits 
              #if HCAL_hit and not ECAL_hit :
              if always_true:
              
                #GO ON WITH ASSOCIATION cluster to sim part BASELINE
                this_dR = clPos.DrEtaPhi(simPart3Vec)
                
                ### dR BETWEEN CLUSTERS AND MC IN BASELINE
                this_dRCluSim = clPos.DrEtaPhi(simPart3Vec)
      
                if(this_dRCluSim<dRCluSim):
                  dRCluSim=this_dRCluSim
                  this_clPos = TVector3()
                  this_clPos.SetXYZ(clx, cly, clz)
                  clPos = this_clPos
                  ene_ClSim = cle
                  
            if(dRCluSim<0.2):
                  hEtaCluSim_baseline.Fill(simPartVec.Eta())  ###Numerator ETA EFFICIENCY CLUSTER/MC
                  hEneCluSim_baseline.Fill(simPartVec.E())
                  hdRCluSim_baseline.Fill(dRCluSim)
                  hEnergyCluSim_baseline.Fill(ene_ClSim)
                  #energy_res_CluSim_baseline = ene_ClSim - ene
                  hEnergyRes_CluSim_baseline.Fill((ene_ClSim - ene)/ene)
          
            #### LOOP ON ALL CLUSTERS PIONS IN MPGD ####
            dRCluSim = 1000
            for clx,cly,clz,cle in zip(ch2.clpox, ch2.clpoy, ch2.clpoz, ch2.clene):
              clPos = TVector3()
              clPos.SetXYZ(clx, cly, clz)
              """"
              HCAL_hit = False #imposta la booleana per capire se Hclu EClu mixedClu, if mixed break
              ECAL_hit = False
              always_true = True
              #OPEN LOOP on hits 
              for hitori, hitx,hity,hitz,hite in zip(ch2.caori, ch2.capox, ch2.capoy, ch2.capoz, ch2.caene):
                hitPos = TVector3()
                hitPos.SetXYZ(hitx, hity, hitz)
                dRCluHit = hitPos.DrEtaPhi(clPos)
                
                
                ### dR BETWEEN CLUSTERS AND MC IN MPGD
                if dRCluHit <0.3 :
                 
                  #............SELEZIONE
                  if hitori== 4 or hitori==5:
                    #print("ECAL !!!!")
                    ECAL_hit = True
                
                  if hitori== 6 or hitori==7 or hitori==8:
                    #print("HCAL")
                    HCAL_hit = True
                    hdRCluHit_mpgd.Fill(dRCluHit)
              """    
              #CLOSE LOOP on hits 
              #if HCAL_hit and not ECAL_hit : 
              if always_true :
                #print("H ONLY")
                
                #GO ON WITH ASSOCIATION cluster sim part MPGD
                #this_dR = clPos.DrEtaPhi(simPart3Vec)

                #### LOOP ON ALL CLUSTERS IN BASELINE ####
                
                
                ### dR BETWEEN CLUSTERS AND MC IN BASELINE
                this_dRCluSim = clPos.DrEtaPhi(simPart3Vec)
                print("dR=", this_dRCluSim)
      
                if(this_dRCluSim<dRCluSim):
                  dRCluSim=this_dRCluSim
                  this_clPos = TVector3()
                  this_clPos.SetXYZ(clx, cly, clz)
                  clPos = this_clPos
                  ene_ClSim = cle
                  
        
            if(dRCluSim<0.2):
                  hEtaCluSim_mpgd.Fill(simPartVec.Eta())  ###Numerator ETA EFFICIENCY CLUSTER/MC
                  hEneCluSim_mpgd.Fill(simPartVec.E())
                  hdRCluSim_mpgd.Fill(dRCluSim)
                  hEnergyCluSim_mpgd.Fill(ene_ClSim)
                  print("Cluster Energy: ", ene_ClSim)
                  hEnergyRes_CluSim_mpgd.Fill((ene_ClSim - ene)/ene)
                  ene_ClSim_correct =  (ene_ClSim - intercept)/slope
                  hEnergyCluSim_mpgd_correct.Fill(ene_ClSim_correct)
                  hEnergyRes_CluSim_mpgd_correct.Fill((ene_ClSim_correct - ene)/ene)
            

        
   myC = TCanvas( 'myC', 'Cluster Multiplicity', 200, 10, 1400, 1200 )
   hClusterNumber.SetLineColor(ROOT.kBlue-3)
   hClusterNumber.Draw()
   myC.SaveAs("./plots_Shower/"+subdir+"/ClusterMultiplicity.png")
   myC.Delete()   
  
   hEff_Eta_CluSim_baseline = ROOT.TEfficiency(hEtaCluSim_baseline, hEtaSim)
   print("Ratio: CLU/MC base %d / %d", hEtaCluSim_baseline.GetEntries(),hEtaSim.GetEntries() )
   hEff_Eta_CluSim_mpgd = ROOT.TEfficiency(hEtaCluSim_mpgd, hEtaSim)
   print("Ratio: CLU/MC mpgd ", hEtaCluSim_mpgd.GetEntries(), " / ", hEtaSim.GetEntries() )
   
   hEff_Ene_CluRc_baseline= ROOT.TEfficiency(hEneCluRc_baseline, hEneRc_baseline)
   hEff_Ene_CluRc_mpgd = ROOT.TEfficiency(hEneCluRc_mpgd, hEneRc_mpgd)
   
   hEff_Ene_CluSim_baseline = ROOT.TEfficiency(hEneCluSim_baseline, hEneSim)
   hEff_Ene_CluSim_mpgd = ROOT.TEfficiency(hEneCluSim_mpgd, hEneSim)
   
   legend = ROOT.TLegend(0.6, 0.5, 0.9, 0.7)  # Coordinate (x1, y1, x2, y2) in NDC
   legend.SetBorderSize(0)  # Imposta lo spessore del bordo a 0 per rendere la legenda trasparente
   color_List = [ROOT.kBlue-3,ROOT.kPink+8,ROOT.kAzure+7,ROOT.kPink+10]
   legend_list = ["baseline", "MPGD", "baseline", "MPGD"]
   subtitle_list = ["MC-matched clusters", "MC-matched clusters", "Reco-matched clusters", "Reco-matched clusters"]
   
   Eta_Eff_List = [hEff_Eta_CluSim_baseline,hEff_Eta_CluSim_mpgd]
   for i in range(len(Eta_Eff_List)):
    canvas = TCanvas( "EtaEfficiency_Canvas_" + str(i), 'Eta Efficiency', 200, 10, 900, 600)
    graph = Eta_Eff_List[i].CreateGraph()
    graph.SetLineColor(color_List[i])
    graph.GetXaxis().SetTitle("#eta")
    graph.GetYaxis().SetTitle("Efficiency")
    graph.GetXaxis().SetLimits(-6, 8)
    graph.GetYaxis().SetLimits(0, 1.5)
    graph.SetMarkerStyle(20)
    graph.SetMarkerSize(0.5)
    graph.SetMarkerColor(color_List[i])
    graph.GetYaxis().SetAxisColor(16)
    graph.GetXaxis().SetAxisColor(16)
    graph.Draw("AP")
    
    legend = ROOT.TLegend(0.77, 0.77, 0.92, 0.82)  # Coordinate (x1, y1, x2, y2) in NDC
    legend.SetBorderSize(0); legend.SetFillStyle(0); legend.SetTextSize(0.03)
    legend.AddEntry(graph, legend_list[i], "ep")
    legend.Draw()
    
    subtitle =  ROOT.TLatex()
    subtitle.SetTextSize(0.03); subtitle.SetNDC(True); subtitle.SetTextAlign(11)
    subtitle.DrawLatex(0.1, 0.91, subtitle_list[i])
    
    energy_label =  ROOT.TLatex()
    energy_label.SetTextSize(0.03); energy_label.SetNDC(True); energy_label.SetTextAlign(31) ,energy_label.SetTextFont(42)
    energy_label.DrawLatex(0.87, 0.91, gun_label)
    
    canvas.SetFrameLineColor(16)
    canvas.Print("./plots_Shower/"+ subdir + "/Efficiency_Eta_"+subdir+"_"+str(i)+".png")
    
   Ene_Eff_List = [hEff_Ene_CluSim_baseline,hEff_Ene_CluSim_mpgd]
   for i in range(len(Ene_Eff_List)):
    canvas1 = TCanvas( "EneEfficiency_Canvas_" + str(i), 'Energy Efficiency', 200, 10, 900, 600)
    graph1 = Ene_Eff_List[i].CreateGraph()
    graph1.SetLineColor(color_List[i])
    graph1.GetXaxis().SetTitle("Energy [GeV]")
    graph1.GetYaxis().SetTitle("Efficiency")
    graph1.GetXaxis().SetLimits(0, 110)
    graph1.SetMarkerStyle(20)
    graph1.SetMarkerSize(0.5)
    graph1.SetMarkerColor(color_List[i])
    graph1.GetYaxis().SetAxisColor(16)
    graph1.GetXaxis().SetAxisColor(16)
    graph1.Draw("AP")
    
    legend = ROOT.TLegend(0.77, 0.77, 0.92, 0.82)  # Coordinate (x1, y1, x2, y2) in NDC
    legend.SetBorderSize(0);legend.SetFillStyle(0);legend.SetTextSize(0.03)
    legend.AddEntry(graph1, legend_list[i], "ep")
    legend.Draw()
    
    subtitle =  ROOT.TLatex()
    subtitle.SetTextSize(0.03)
    subtitle.SetNDC(True)
    subtitle.SetTextAlign(10)
    subtitle.DrawLatex(0.1, 0.91, subtitle_list[i])
    
    energy_label =  ROOT.TLatex()
    energy_label.SetTextSize(0.03)
    energy_label.SetNDC(True)
    energy_label.SetTextAlign(31)
    energy_label.SetTextFont(42)
    energy_label.DrawLatex(0.87, 0.91, gun_label)
    
    canvas1.SetFrameLineColor(16)
    canvas1.SaveAs("./plots_Shower/"+subdir+"/Efficiency_Energy_"+subdir+"_"+str(i)+".png")
  
   
   fgauss = ROOT.TF1("fgauss", "gaus")


   c2 = TCanvas( 'c2', 'Energy of Clusters', 200, 10, 900, 600 )
   hEnergy_list = [hEnergyCluSim_baseline,hEnergyCluSim_mpgd]
   legend_lines = ["MC matched - baseline", "MC matched - MPGD  ", "RC matched - baseline", "RC matched - MPGD  "]
   legend2 = ROOT.TLegend(0.38, 0.63, 0.75, 0.83)
   maxX = max(hEnergyCluSim_baseline.GetMaximumBin(), hEnergyCluSim_mpgd.GetMaximumBin())
   maxY = max(hEnergyCluSim_baseline.GetMaximum(), hEnergyCluSim_mpgd.GetMaximum())
   hEnergyCluSim_mpgd.GetYaxis().SetRangeUser(-1., maxY + 50.)
   hEnergyCluSim_mpgd.GetXaxis().SetRangeUser(-1., maxX + 20.)
   hEnergyCluSim_mpgd.GetYaxis().SetAxisColor(16)
   hEnergyCluSim_mpgd.Fit(fgauss)
   hEnergyCluSim_mpgd.Draw()
   hEnergyCluSim_baseline.Draw("same")
   #fgauss.Draw("same")
   for i in range(len(hEnergy_list)):
    hEnergy_list[i].SetStats(0) 
    hEnergy_list[i].SetTitle("")
    hEnergy_list[i].SetLineColor(color_List[i])
    hEnergy_list[i].Draw("same")
    legend_line = ROOT.TLatex
    n_entries = hEnergy_list[i].GetEntries(); mean = round(hEnergy_list[i].GetMean(),2); stddev = round(hEnergy_list[i].GetStdDev(),2)
    legend2.SetBorderSize(0); legend2.SetFillStyle(0)
    legend_line = legend_lines[i] + " n = " + str(n_entries) + " - #mu = " + str(mean) + " - #sigma = " + str(stddev)
    legend2.SetTextSize(0.028)
    legend2.AddEntry(hEnergy_list[i], legend_line, "l")
   legend2.Draw()
   text =  ROOT.TLatex()
   text.SetTextSize(0.03); text.SetNDC(True); text.SetTextAlign(11)
   text.DrawLatex(0.1, 0.91, "Clusters Energy")
   text.Draw()
   energy_label.DrawLatex(0.9, 0.91, gun_label)
   c2.SaveAs("./plots_Shower/"+subdir+"/EnergyClu_"+subdir+".png")
   
   fit_results = hEnergyCluSim_mpgd.GetFunction("fgauss")
   print("Fit Parameters:")
   print("Mean: {:.3f}".format(fit_results.GetParameter(1)))
   print("Std dev: {:.3f}".format(fit_results.GetParameter(2)))
   
   c22 = TCanvas( 'c22', 'Energy of Clusters Corrected', 200, 10, 900, 600 )
   #hEnergy_list = [hEnergyCluSim_baseline,hEnergyCluSim_mpgd]
   #legend_lines = ["MC matched - baseline", "MC matched - MPGD  ", "RC matched - baseline", "RC matched - MPGD  "]
   #legend2 = ROOT.TLegend(0.38, 0.63, 0.75, 0.83)
   #maxX = max(hEnergyCluSim_baseline.GetMaximumBin(), hEnergyCluSim_mpgd.GetMaximumBin())
   #maxY = max(hEnergyCluSim_baseline.GetMaximum(), hEnergyCluSim_mpgd.GetMaximum())
   #hEnergyCluSim_mpgd_correct.GetYaxis().SetRangeUser(-1., maxY + 50.)
   #hEnergyCluSim_mpgd.GetXaxis().SetRangeUser(-1., maxX + 20.)
   hEnergyCluSim_mpgd_correct.GetYaxis().SetAxisColor(16)
   hEnergyCluSim_mpgd_correct.Draw()
   text =  ROOT.TLatex()
   text.SetTextSize(0.03); text.SetNDC(True); text.SetTextAlign(11)
   text.DrawLatex(0.1, 0.91, "Clusters Calibrated Energy")
   text.Draw()
   energy_label.DrawLatex(0.9, 0.91, gun_label)
   c22.SaveAs("./plots_Shower/"+subdir+"/EnergyClu_"+subdir+"_corrected.png")
   
   
   
   fit_results = hEnergyCluSim_mpgd.GetFunction("fgauss")
   print("Fit Parameters:")
   print("Mean: {:.3f}".format(fit_results.GetParameter(1)))
   print("Std dev: {:.3f}".format(fit_results.GetParameter(2)))
  
   c23 = TCanvas( 'c23', 'Energy Scale of Clusters Corrected', 200, 10, 900, 600 )
   hEnergyRes_CluSim_mpgd_correct.GetYaxis().SetAxisColor(16)
   hEnergyRes_CluSim_mpgd_correct.Draw()
   text =  ROOT.TLatex()
   text.SetTextSize(0.03); text.SetNDC(True); text.SetTextAlign(11)
   text.DrawLatex(0.1, 0.91, "Clusters Calibrated Energy Scale")
   text.Draw()
   energy_label.DrawLatex(0.9, 0.91, gun_label)
   c23.SaveAs("./plots_Shower/"+subdir+"/hEnergyRes_CluSim_"+subdir+"_corrected.png")
   
   
   
   fit_results = hEnergyCluSim_mpgd.GetFunction("fgauss")
   print("Fit Parameters:")
   print("Mean: {:.3f}".format(fit_results.GetParameter(1)))
   print("Std dev: {:.3f}".format(fit_results.GetParameter(2)))
  

   
   
   
   
   hResolution_list = [hEnergyRes_CluSim_baseline,hEnergyRes_CluSim_mpgd]
   """
   c5 = TCanvas( 'c5', 'Energy Resolution of Clusters', 200, 10, 900, 600 )
   #c5.SetCanvasSize(1500, 1000)
   #c5.SetWindowSize(1900, 1000)
   #maxX = max(hEnergyCluSim_baseline.GetMaximumBin(), hEnergyCluSim_mpgd.GetMaximumBin())
   maxY = max(hResolution_list[0].GetMaximum(), hResolution_list[1].GetMaximum())
   hResolution_list[0].GetYaxis().SetRangeUser(-1., maxY + 50.)
   #hResolution_list[0].GetXaxis().SetRangeUser(-1., maxX + 20.)
   hResolution_list[0].GetYaxis().SetAxisColor(16)
   hResolution_list[0].GetXaxis().SetRangeUser(-2.,2.)
   hResolution_list[0].GetXaxis().SetTitle("(E_{cl} - E_{MC})/E_{MC}")
   hResolution_list[0].GetYaxis().SetTitle("Entries")
   hResolution_list[0].SetLineColor(color_List[0])
   hResolution_list[0].Draw()
   hResolution_list[1].SetLineColor(color_List[1])
   hResolution_list[1].Draw("same")
   hResolution_list[0].SetStats(0) 
   hResolution_list[0].SetTitle("")
   legend_line0 = ROOT.TLatex
   legend_line1 = ROOT.TLatex
   n_entries0 = hResolution_list[0].GetEntries(); mean0 = round(hResolution_list[0].GetMean(),2); stddev0 = round(hResolution_list[0].GetStdDev(),2)
   n_entries1 = hResolution_list[1].GetEntries(); mean1 = round(hResolution_list[1].GetMean(),2); stddev1 = round(hResolution_list[1].GetStdDev(),2)
   legend5 = ROOT.TLegend(0.38, 0.73, 0.75, 0.85)
   legend5.SetBorderSize(0); legend5.SetFillStyle(0); legend5.SetTextSize(0.028)
   legend_line0 = legend_lines[0] + " n = " + str(n_entries0) + " - #mu = " + str(mean0) + " - #sigma = " + str(stddev0)
   legend_line1 = legend_lines[1] + " n = " + str(n_entries1) + " - #mu = " + str(mean1) + " - #sigma = " + str(stddev1)
   legend5.AddEntry(hResolution_list[0], legend_line0, "l")
   legend5.AddEntry(hResolution_list[1], legend_line1, "l")
   legend5.SetBorderSize(0); legend5.SetFillStyle(0)
   legend5.Draw()
   text.SetTextSize(0.03); text.SetNDC(True); text.SetTextAlign(11)
   text.DrawLatex(0.1, 0.91, "Energy Scale of Clusters")
   energy_label.DrawLatex(0.87, 0.91, gun_label)
   c5.SaveAs("./plots_Shower/"+subdir+"/hEnergyRes_CluSim_"+subdir+".png")
   legend5.Clear()
   
   
   hdR_list = [hdRCluSim_baseline,hdRCluSim_mpgd, hdRCluHit_baseline, hdRCluHit_mpgd]
   
   c7 = TCanvas( 'c7', 'dR of Clusters', 200, 10, 900, 600 )
   
   hdR_list[0].GetYaxis().SetRangeUser(0,80)
   hdR_list[0].GetXaxis().SetRangeUser(-5,.22)
   hdR_list[0].GetXaxis().SetTitle("#DeltaR_{min}")
   hdR_list[0].GetYaxis().SetTitle("Entries")
   hdR_list[0].GetYaxis().SetAxisColor(16)
   hdR_list[0].SetLineColor(color_List[0])
   hdR_list[0].Draw()
   hdR_list[1].SetLineColor(color_List[1])
   hdR_list[1].Draw("same")
   hdR_list[0].SetStats(0) 
   hdR_list[0].SetTitle("")
   n_entries0 = hdR_list[0].GetEntries(); mean0 = round(hdR_list[0].GetMean(),2); stddev0 = round(hdR_list[0].GetStdDev(),2)
   n_entries1 = hdR_list[1].GetEntries(); mean1 = round(hdR_list[1].GetMean(),2); stddev1 = round(hdR_list[1].GetStdDev(),2)
   legend_line0 = legend_lines[0] + " n = " + str(n_entries0) + " - #mu = " + str(mean0) + " - #sigma = " + str(stddev0)
   legend_line1 = legend_lines[1] + " n = " + str(n_entries1) + " - #mu = " + str(mean1) + " - #sigma = " + str(stddev1)
   legend5.AddEntry(hdR_list[0], legend_line0, "l")
   legend5.AddEntry(hdR_list[1], legend_line1, "l")
   legend5.Draw()
   text.SetTextSize(0.03); text.SetNDC(True); text.SetTextAlign(11)
   text.DrawLatex(0.1, 0.91, "#DeltaR of Clusters - MC particles")
   energy_label.DrawLatex(0.87, 0.91, gun_label)
   c7.SaveAs("./plots_Shower/"+subdir+"/hdR_CluSim_"+subdir+".png")
   legend5.Clear()
   
   myC = TCanvas( 'myC', 'dR of Clusters and Hits', 200, 10, 900, 600 )
   hdR_list[2].SetStats(0); hdR_list[2].SetTitle("")
   hdR_list[2].GetYaxis().SetAxisColor(16)
   hdR_list[2].GetYaxis().SetRangeUser(0,2500)
   hdR_list[2].SetLineColor(color_List[0])
   hdR_list[2].Draw()
   hdR_list[3].SetLineColor(color_List[1])
   hdR_list[3].Draw("same")
   
   text.SetTextSize(0.03); text.SetNDC(True); text.SetTextAlign(11)
   text.DrawLatex(0.1, 0.91, "#DeltaR of Clusters - Hits")
   

   n_entries0 = hdR_list[2].GetEntries(); mean0 = round(hdR_list[2].GetMean(),2); stddev0 = round(hdR_list[2].GetStdDev(),2)
   n_entries1 = hdR_list[3].GetEntries(); mean1 = round(hdR_list[3].GetMean(),2); stddev1 = round(hdR_list[3].GetStdDev(),2)
   legend_line0 = legend_lines[0] + " n = " + str(n_entries0) + " - #mu = " + str(mean0) + " - #sigma = " + str(stddev0)
   legend_line1 = legend_lines[1] + " n = " + str(n_entries1) + " - #mu = " + str(mean1) + " - #sigma = " + str(stddev1)
   legend5.AddEntry(hdR_list[2], legend_line0, "l")
   legend5.AddEntry(hdR_list[3], legend_line1, "l")
   legend5.Draw()
   myC.SaveAs("./plots_Shower/"+subdir+"/hdR_CluHit_"+subdir+".png")
   legend5.Clear()
  
   
   
   # Scriviamo i dati nella tabella nel file CSV
  
   csv_file_name = subdir + ".csv"
   csv_directory = "./csv_dir"
   file_path = f"{csv_directory}/{csv_file_name}"
   with open(file_path, mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(["ParticleID", "Momentum", "Geometry", "Mean Energy Resolution", "Standard Dev"])
    writer.writerow([part_ID, gun_momentum, "baseline", round(hEnergyRes_CluSim_baseline.GetMean(),2), round(hEnergyRes_CluSim_baseline.GetStdDev(),2) ])
    writer.writerow([part_ID, gun_momentum, "MPGD    ", round(hEnergyRes_CluSim_mpgd.GetMean(),2), round(hEnergyRes_CluSim_mpgd.GetStdDev(),2) ])
   """
  